---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubelet-bootstrap-cred-manager
  namespace: openshift-machine-config-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubelet-bootstrap-cred-manager
  namespace: openshift-machine-config-operator
rules:
- apiGroups: ["config.openshift.io"]
  resources: ["infrastructures"]
  verbs: ["get", "list", "watch", "create"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create"]
- apiGroups:
  - security.openshift.io
  resourceNames:
  - privileged
  resources:
  - securitycontextconstraints
  verbs:
  - use
- apiGroups:
    - ""
  resources:
    - nodes
  verbs:
    - get
    - list
    - patch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
 name: use-privileged-scc-cred-manager
subjects:
 - kind: ServiceAccount
   name: kubelet-bootstrap-cred-manager
   namespace: openshift-machine-config-operator
roleRef:
 kind: ClusterRole
 name: kubelet-bootstrap-cred-manager 
 apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kubelet-bootstrap-cred-manager
  namespace: openshift-machine-config-operator
  labels:
    k8s-app: kubelet-bootstrap-cred-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kubelet-bootstrap-cred-manager
  template:
    metadata:
      labels:
        k8s-app: kubelet-bootstrap-cred-manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: cred-manager/node-configured
                    operator: DoesNotExist
                  - key: node-role.kubernetes.io/master
                    operator: Exists
      serviceAccount: kubelet-bootstrap-cred-manager
      serviceAccountName: kubelet-bootstrap-cred-manager
      containers:
      - name: kubelet-bootstrap-cred-manager
        image: quay.io/openshift/origin-cli:v4.0
        command:
        - /bin/bash
        - -c
        - |
           export TK="$(cat /run/secrets/kubernetes.io/serviceaccount/token)"
           chroot /host <<"EOT"
           set -eoux pipefail
           export KUBECONFIG=/etc/kubernetes/static-pod-resources/kube-apiserver-certs/secrets/node-kubeconfigs/lb-int.kubeconfig
           echo "---------------------------------"
           echo "Gather info..."
           echo "---------------------------------"
           # context
           intapi=$(oc get infrastructures.config.openshift.io cluster -o "jsonpath={.status.apiServerInternalURI}")
           context=$(oc --kubeconfig=/etc/kubernetes/static-pod-resources/kube-apiserver-certs/secrets/node-kubeconfigs/lb-int.kubeconfig config current-context)
           # cluster
           cluster=$(oc config view -o "jsonpath={.contexts[?(@.name==\"$context\")].context.cluster}")
           server=$(oc config view -o "jsonpath={.clusters[?(@.name==\"$cluster\")].cluster.server}")
           # token
           ca_crt_data=$(oc get secret -n openshift-machine-config-operator node-bootstrapper-token -o "jsonpath={.data.ca\.crt}" | base64 --decode)
           namespace=$(oc get secret -n openshift-machine-config-operator node-bootstrapper-token  -o "jsonpath={.data.namespace}" | base64 --decode)
           token=$(oc get secret -n openshift-machine-config-operator node-bootstrapper-token -o "jsonpath={.data.token}" | base64 --decode)
           echo "---------------------------------"
           echo "Generate kubeconfig"
           echo "---------------------------------"
           export KUBECONFIG="$(mktemp)"
           kubectl config set-credentials "kubelet" --token="$token" >/dev/null
           ca_crt="$(mktemp)"; echo "$ca_crt_data" > $ca_crt
           kubectl config set-cluster $cluster --server="$intapi" --certificate-authority="$ca_crt" --embed-certs >/dev/null
           kubectl config set-context kubelet --cluster="$cluster" --user="kubelet" >/dev/null
           kubectl config use-context kubelet >/dev/null
           echo "---------------------------------"
           echo "Print kubeconfig"
           echo "---------------------------------"
           cat "$KUBECONFIG"
           echo "---------------------------------"
           echo "Whoami?"
           echo "---------------------------------"
           oc whoami
           whoami
           echo "---------------------------------"
           echo "Moving to real kubeconfig"
           echo "---------------------------------"
           cp /etc/kubernetes/kubeconfig /etc/kubernetes/kubeconfig.prev
           chown root:root ${KUBECONFIG}
           chmod 0644 ${KUBECONFIG}
           mv "${KUBECONFIG}" /etc/kubernetes/kubeconfig
           oc label node $NODE_NAME cred-manager/node-configured=$(date +%s) --token $TK  --server https://172.30.0.1:443 --insecure-skip-tls-verify --overwrite
           EOT
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        volumeMounts:
          - mountPath: /host
            name: host
        securityContext:
          allowPrivilegeEscalation: true
          runAsUser: 0
          runAsGroup: 0
          privileged: true
          capabilities:
            add:
            - SYS_CHROOT
        tty: true
      nodeSelector:
        node-role.kubernetes.io/master: ""
      priorityClassName: "system-cluster-critical"
      restartPolicy: Always
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 120
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 120
      securityContext:
        fsGroup: 0
      volumes:
        - hostPath:
            path: /
            type: Directory
          name: host
